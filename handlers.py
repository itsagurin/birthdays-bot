from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards import *
from utils import parse_date, format_birthday_info
import logging

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BirthdayStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_gift_ideas = State()
    editing_gifts = State()


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
temp_birthday_data = {}
temp_reminder_data = {}


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await db.add_user(message.from_user.id, message.from_user.username)

    welcome_text = """
üéÇ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–Ω–µ–≤–Ω–∏–∫ –î–Ω–µ–π –†–æ–∂–¥–µ–Ω–∏—è!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
‚Ä¢ –ù–µ –∑–∞–±—ã—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await message.answer(welcome_text, reply_markup=main_menu(), parse_mode='Markdown')


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = """
üéÇ *–î–Ω–µ–≤–Ω–∏–∫ –î–Ω–µ–π –†–æ–∂–¥–µ–Ω–∏—è*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    await callback.message.edit_text(welcome_text, reply_markup=main_menu(), parse_mode='Markdown')


@router.callback_query(F.data == "add_birthday")
async def add_birthday_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞:",
        reply_markup=back_to_main()
    )
    await state.set_state(BirthdayStates.waiting_for_name)


@router.message(BirthdayStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞"""
    name = message.text.strip()

    if len(name) > 200:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(name=name)

    await message.answer(
        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è *{name}*\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ 01.01.1990\n"
        "‚Ä¢ 01/01/1990\n"
        "‚Ä¢ 01-01-1990\n"
        "‚Ä¢ 01.01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)",
        parse_mode='Markdown'
    )
    await state.set_state(BirthdayStates.waiting_for_date)


@router.message(BirthdayStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = parse_date(message.text)
        data = await state.get_data()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑—É
        birthday_id = await db.add_birthday(
            message.from_user.id,
            data['name'],
            birth_date
        )

        await message.answer(
            f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è *{data['name']}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            "üéÅ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"add_gifts_{birthday_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="main_menu")]
            ]),
            parse_mode='Markdown'
        )

        await state.clear()

    except ValueError as e:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ 01.01.1990\n"
            "‚Ä¢ 01/01/1990\n"
            "‚Ä¢ 01-01-1990\n"
            "‚Ä¢ 01.01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)"
        )


@router.callback_query(F.data.startswith("add_gifts_"))
async def add_gifts_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
    birthday_id = int(callback.data.split("_")[2])
    temp_birthday_data[callback.from_user.id] = birthday_id

    await callback.message.edit_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=back_to_main()
    )
    await state.set_state(BirthdayStates.waiting_for_gift_ideas)


@router.message(BirthdayStates.waiting_for_gift_ideas)
async def process_gift_ideas(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
    gift_ideas = message.text.strip()
    birthday_id = temp_birthday_data.get(message.from_user.id)

    if birthday_id:
        await db.update_gift_ideas(birthday_id, gift_ideas)
        await message.answer(
            "‚úÖ –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=main_menu()
        )
        del temp_birthday_data[message.from_user.id]

    await state.clear()


@router.callback_query(F.data == "list_birthdays")
async def list_birthdays(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthdays = await db.get_birthdays(callback.from_user.id)

    if not birthdays:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_birthday")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    from utils import days_until_birthday
    birthdays.sort(key=lambda x: days_until_birthday(x['birth_date']))

    text = "üìÖ *–í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*\n\n"
    keyboard_buttons = []

    for birthday in birthdays:
        text += format_birthday_info(birthday) + "\n"
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üë§ {birthday['name']}",
            callback_data=f"birthday_{birthday['id']}"
        )])

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith("birthday_"))
async def show_birthday_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthday_id = int(callback.data.split("_")[1])
    birthday = await db.get_birthday_by_id(birthday_id)

    if not birthday:
        await callback.answer("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = format_birthday_info(birthday)

    await callback.message.edit_text(
        text,
        reply_markup=birthday_actions(birthday_id),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith("gifts_"))
async def show_gifts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    birthday_id = int(callback.data.split("_")[1])
    birthday = await db.get_birthday_by_id(birthday_id)

    if not birthday:
        await callback.answer("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = f"üéÅ *–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {birthday['name']}:*\n\n"

    if birthday['gift_ideas']:
        text += birthday['gift_ideas']
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"

    await callback.message.edit_text(
        text,
        reply_markup=gift_actions(birthday_id),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith("edit_gifts_"))
async def edit_gifts_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
    birthday_id = int(callback.data.split("_")[2])
    temp_birthday_data[callback.from_user.id] = birthday_id

    await callback.message.edit_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:",
        reply_markup=back_to_main()
    )
    await state.set_state(BirthdayStates.editing_gifts)


@router.message(BirthdayStates.editing_gifts)
async def process_edit_gifts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
    gift_ideas = message.text.strip()
    birthday_id = temp_birthday_data.get(message.from_user.id)

    if birthday_id:
        await db.update_gift_ideas(birthday_id, gift_ideas)
        await message.answer(
            "‚úÖ –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ö –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data=f"birthday_{birthday_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        del temp_birthday_data[message.from_user.id]

    await state.clear()


@router.callback_query(F.data.startswith("add_reminder_"))
async def add_reminder_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    birthday_id = int(callback.data.split("_")[2])
    temp_reminder_data[callback.from_user.id] = birthday_id

    await callback.message.edit_text(
        "üîî –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å?",
        reply_markup=reminder_days()
    )


@router.callback_query(F.data.startswith("remind_"))
async def process_reminder_days(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    days = int(callback.data.split("_")[1])
    birthday_id = temp_reminder_data.get(callback.from_user.id)

    if birthday_id:
        await db.add_reminder(birthday_id, days)

        days_text = "–≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if days == 0 else f"–∑–∞ {days} –¥–Ω–µ–π" if days > 1 else "–∑–∞ 1 –¥–µ–Ω—å"

        await callback.message.edit_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {days_text} –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data=f"reminders_{birthday_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        del temp_reminder_data[callback.from_user.id]


@router.callback_query(F.data.startswith("reminders_"))
async def show_reminders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthday_id = int(callback.data.split("_")[1])
    birthday = await db.get_birthday_by_id(birthday_id)
    reminders = await db.get_reminders(birthday_id)

    if not birthday:
        await callback.answer("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {birthday['name']}:*\n\n"

    if reminders:
        for reminder in reminders:
            days = reminder['days_before']
            if days == 0:
                text += "‚Ä¢ –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            elif days == 1:
                text += "‚Ä¢ –ó–∞ 1 –¥–µ–Ω—å\n"
            else:
                text += f"‚Ä¢ –ó–∞ {days} –¥–Ω–µ–π\n"
    else:
        text += "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

    await callback.message.edit_text(
        text,
        reply_markup=reminder_actions(birthday_id),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith("delete_"))
async def confirm_delete_birthday(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthday_id = int(callback.data.split("_")[1])
    birthday = await db.get_birthday_by_id(birthday_id)

    if not birthday:
        await callback.answer("‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.edit_text(
        f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è *{birthday['name']}*?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_delete(birthday_id),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_birthday_confirmed(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birthday_id = int(callback.data.split("_")[2])

    await db.delete_birthday(birthday_id, callback.from_user.id)

    await callback.message.edit_text(
        "‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω!",
        reply_markup=main_menu()
    )


@router.callback_query(F.data == "manage_reminders")
async def manage_reminders(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    birthdays = await db.get_birthdays(callback.from_user.id)

    if not birthdays:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="add_birthday")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return

    text = "üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:"

    keyboard_buttons = []
    for birthday in birthdays:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üë§ {birthday['name']}",
            callback_data=f"reminders_{birthday['id']}"
        )])

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode='Markdown'
    )


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üéÇ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏
‚Ä¢ üéÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞ 1, 3, 7, 14, 30 –¥–Ω–µ–π)
‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è

*–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:*
‚Ä¢ 01.01.1990
‚Ä¢ 01/01/1990  
‚Ä¢ 01-01-1990
‚Ä¢ 01.01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
    """

    await callback.message.edit_text(
        help_text,
        reply_markup=back_to_main(),
        parse_mode='Markdown'
    )


@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üéÇ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏
‚Ä¢ üéÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞ 1, 3, 7, 14, 30 –¥–Ω–µ–π)
‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è

*–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:*
‚Ä¢ 01.01.1990
‚Ä¢ 01/01/1990  
‚Ä¢ 01-01-1990
‚Ä¢ 01.01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ
    """

    await message.answer(
        help_text,
        reply_markup=main_menu(),
        parse_mode='Markdown'
    )