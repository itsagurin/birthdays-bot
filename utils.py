from datetime import datetime, date
import re


def parse_date(date_str: str) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    date_str = date_str.strip()

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        "%d.%m.%Y",  # 01.01.1990
        "%d/%m/%Y",  # 01/01/1990
        "%d-%m-%Y",  # 01-01-1990
        "%d.%m",  # 01.01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
        "%d/%m",  # 01/01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
        "%d-%m",  # 01-01 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
    ]

    for fmt in formats:
        try:
            parsed_date = datetime.strptime(date_str, fmt)
            # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
            if fmt in ["%d.%m", "%d/%m", "%d-%m"]:
                parsed_date = parsed_date.replace(year=datetime.now().year)
            return parsed_date
        except ValueError:
            continue

    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")


def format_date(birth_date: date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]

    return f"{birth_date.day} {months[birth_date.month - 1]} {birth_date.year}"


def calculate_age(birth_date: date) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç"""
    today = date.today()
    age = today.year - birth_date.year

    if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
        age -= 1

    return age


def days_until_birthday(birth_date: date) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–Ω–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    today = date.today()
    this_year_birthday = birth_date.replace(year=today.year)

    if this_year_birthday < today:
        this_year_birthday = birth_date.replace(year=today.year + 1)

    return (this_year_birthday - today).days


def format_birthday_info(birthday: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = birthday['birth_date']
    age = calculate_age(birth_date)
    days_left = days_until_birthday(birth_date)

    info = f"üéÇ *{birthday['name']}*\n"
    info += f"üìÖ {format_date(birth_date)} ({age} –ª–µ—Ç)\n"

    if days_left == 0:
        info += "üéâ *–°–ï–ì–û–î–ù–Ø –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø!*\n"
    elif days_left == 1:
        info += "üî• *–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!*\n"
    else:
        info += f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π\n"

    if birthday.get('gift_ideas'):
        info += f"üéÅ –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {birthday['gift_ideas']}\n"

    return info